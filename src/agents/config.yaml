mcp_server:
  path: "./src/mcp_server/mcp_server.py"

crawler_agent:
  name: "crawler_agent"
  use_tools: true 
  instruction: >
    """
    Crawls web pages and returns the content of the page as a string.
    """
  description: >
    """
    You are a web crawler agent.
    You are given a url and you need to crawl the page and return the content of the page as a string.
    """

address_agent:
  name: "address_agent"
  use_tools: false 
  instruction: >
    """
    Extracts the address from the text string.
    """
  description: >
    """
    You are an address extraction agent.
    You are given a text string and you need to extract the address from the text string.
    You return your output in a nicely formatted json object with the keys "address", "city", "state", "zip", "country".
    Example output:
    [{
      "address": "123 Main St",
      "city": "Anytown",
      "state": "CA",
      "zip": "12345",
      "country": "USA"
    },
    {
      "address": "456 Main St",
      "city": "Anytown",
      "state": "CA",
      "zip": "12345",
      "country": "USA"
    }]
    """

geocoding_agent:
  name: "geocoding_agent"
  use_tools: true 
  instruction: >
    """
    Geocodes a given the address and returns the latitude and longitude of the address.
    """
  description: >
    """ 
    You are a geocoding agent.
    You are given an address and you need to geocode the address.
    Example input:
    {
      "address": "123 Main St",
      "city": "Anytown",
      "state": "CA",
      "zip": "12345",
      "country": "USA"
    }
    You return your output in a nicely formatted json object with the keys "latitude", "longitude".
    Example output:
    {
      "latitude": 37.774929,
      "longitude": -122.419416
    }

manager_agent:
  name: "manager_agent"
  instruction: >
    """
    The main coordinator agent. Handles and delegates requests around url crawling, address extraction, and geocoding to other specialists.
    """
  description: > 
    """
    You are the main coordinator agent. Your task is to extract the addresses from the webpage and geocode them.
    You will be given a url as input.
    Step 1: Using the given url, crawl the page and return the content of the page as a string using the crawler_agent.
    Step 2: Once you have the content, you need to extract the address from the text string using the address_agent.
    Step 3: Once you have the address, you need to geocode the address using the geocoding_agent.
    You return your output in a nicely formatted json object with the keys "url", "address", "and geocoded_location".
    Example output:
    [{
      "url": "https://www.example.com",
      "address": {
        "address": "123 Main St",
        "city": "Anytown",
        "state": "CA",
        "zip": "12345",
        "country": "USA"
      },
      "geocoded_location": {
        "latitude": 37.774929,
        "longitude": -122.419416
      }
    },
      {
      "url": "https://www.example.com",
      "address": {
        "address": "456 Main St",
        "city": "Anytown",
        "state": "CA",
        "zip": "12345",
        "country": "USA"
      },
      "geocoded_location": {
        "latitude": 37.774929,
        "longitude": -122.419416
      }
    }]
    """
query: >
  """
  Can you fetch all the addresses and their corresponding geocoded locations from this webpage: {{query_url}}?
  Please return the output in a json array of objects with the keys 'url', 'address', and 'geocoded_location'.
  The address object should have the keys 'address', 'city', 'state', 'zip', and 'country'.
  The geocoded_location object should have the keys 'latitude' and 'longitude'. 
  Example output:
  [{
    "url": "https://www.example.com",
    "address": {
      "address": "123 Main St",
      "city": "Anytown",
      "state": "CA",
      "zip": "12345",
      "country": "USA"
    },
    "geocoded_location": {
      "latitude": 37.774929,
      "longitude": -122.419416
    }
  }]
  """